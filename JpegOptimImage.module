<?php

/**
 * JpegOptimImage: Optimize resized jpegs.
 * 
 * By Jonathan Dart
 * http://metricmarketing.ca/blog/author/jonathan-dart
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
class JpegOptimImage extends WireData implements Module, ConfigurableModule
{
	static $defaults = array(
		'joQuality' => 75,
		'joThreshold' => 40,
		'joProgressive' => true,
		'joStrip' => true,
		'joBinary' => 'jpegoptim'
	);

	protected
		$functionCallOptions = array();

	public static function getModuleInfo() 
	{
		return array(
			'title' => 'JpegOptimImage', 
			'version' => 10, 
			'summary' => 'JpegOptimImage: Optimize resized jpegs.',
			'href' => 'https://github.com/jdart/JpegOptimImage',
			'singular' => true, 
			'autoload' => true,
		);
	}

	public function init()
	{
		$this->addHookAfter('ImageSizer::resize', $this, 'imageSizerResizeAfter');
		$this->addHook('Pageimage::optimize', $this, 'pageImageOptimize');
	}

	public function imageSizerResizeAfter($event)
	{
		$imageSizer = $event->object;

		$this->functionCallOptions = array();

		if (false === $imageSizer->useJPEGOPTIM)
			return;

		if ($imageSizer->getImageType() !== IMAGETYPE_JPEG)
			return;

		$this->fileOptimize($imageSizer->getFilename());
	}

	public function fileOptimize($path, $newPath=null)
	{		
		if ( ! is_null($newPath)) // Make a copy for jpegoptim to overwrite
			copy($path, $newPath);

		$cmd = array(
			escapeshellarg($this->valueOrDefault('joBinary')),
			'-q',
		);

		if ($this->valueOrDefault('joStrip'))
			$cmd[] =  '--strip-exif --strip-com --strip-icc';

		if ( ! $this->valueOrDefault('joLossless')) {
			$cmd[] = sprintf('-m%d', $this->valueOrDefault('joQuality'));
			$cmd[] = sprintf('-T%d', $this->valueOrDefault('joThreshold'));
		}

		if ($this->valueOrDefault('joProgressive'))
			$cmd[] = '--all-progressive';

		$cmd[] = escapeshellarg(is_null($newPath) ? $path : $newPath);
		
		exec(implode(' ', $cmd));
	}

	/**
	 * There are two scenarios this function covers:
	 *
	 * Resizing an original image:
	 *    $page->image->optimize()->url;
	 *
	 * Resizing a manipulated image:
	 *    $page->image->someManipulations()->optimize()->url;
	 */
	public function pageImageOptimize(HookEvent $event)
	{
		$image = $event->object; // Pageimage
		$path = $image->filename;

		// options passed in to optimize()
		$this->functionCallOptions = $event->arguments && is_array($event->arguments[0])
			? $event->arguments[0] 
			: array();

		// original images should not be overwritten by an optimized version
		if ($this_is_the_original = is_null($image->original)) {

			if ( ! ($newPath = $this->optimizedFilename($path)))
				return;
			
			if ( ! file_exists($newPath))
				$this->fileOptimize($path, $newPath);

			$return_image = clone $image;
			$return_image->setOriginal($image);
			$return_image->setFilename($newPath);
			
		} else { // a variation (manipulated)

			$original_mtime = filemtime($image->original->filename);

			// only run optimize if the original file is newer
			if (filemtime($path) > $original_mtime) {
				$this->fileOptimize($path);
				touch($path, $original_mtime);
			}

			$return_image = $image;
		}

		$event->return = $return_image;
	}

	public function optimizedFilename($path)
	{
		$pathInfo = pathinfo($path);

		if ( ! in_array(strtolower($pathInfo['extension']), array('jpg', 'jpeg')))
			return false;

		$newPath = sprintf('%s%s%s.0x0.%s',
			$pathInfo['dirname'], 
			DIRECTORY_SEPARATOR, 
			$pathInfo['filename'], 
			$pathInfo['extension']
		);

		return $newPath;
	}

	public static function getModuleConfigInputfields(array $data)
	{
		$fields = new InputfieldWrapper();
		$modules = Wire::getFuel('modules');

		$field = $modules->get("InputfieldText");
		$field->name = "joQuality";
		$field->label = __("Maximum image quality factor");
		$field->value = static::dataValueOrDefault('joQuality', $data);
		$field->description = __("Sets  the  maximum  image  quality  factor. This option will reduce quality of those source files that were saved using higher quality setting. While files that already have lower quality setting will be compressed using the lossless optimization method. Valid values for quality parameter are: 0 - 100");
		$fields->add($field);

		$field = $modules->get("InputfieldText");
		$field->name = "joThreshold";
		$field->label = __("Minimum Compression Threshold");
		$field->value = static::dataValueOrDefault('joThreshold', $data);
		$field->description = __("Keep the file unchanged if the compression gain is lower than the threshold (%). Valid values for thresholds are: 0 - 100");
		$fields->add($field);

		$field = $modules->get("InputfieldText");
		$field->name = "joBinary";
		$field->label = __("JpegOptim Binary path");
		$field->value = static::dataValueOrDefault('joBinary', $data);
		$field->description = __("Path to the jpeg optim location");
		$fields->add($field);

		$field = $modules->get("InputfieldCheckbox");
		$field->name = "joProgressive";
		$field->label = __("Create progressive images");
		$field->checked = static::dataValueOrDefault('joProgressive', $data);
		$field->description = __("Force all output files to be progressive.");
		$fields->add($field);

		$field = $modules->get("InputfieldCheckbox");
		$field->name = "joStrip";
		$field->label = __("Strip all markers from output file");
		$field->checked = static::dataValueOrDefault('joStrip', $data);
		$field->description = __("Output JPEGs will still likely contain one or two markers (JFIF and Adobe APP14) depending on colorspace used in the image, as these markers are generated by the libjpeg encoder automatically.");
		$fields->add($field);

		return $fields;
	}

	public static function dataValueOrDefault($key, $data=null)
	{
		if ( ! isset($data[$key]))
			if (isset(static::$defaults[$key]))
				return static::$defaults[$key];
			else
				return null;

		return $data[$key];
	}

	public function valueOrDefault($key)
	{
		$value = null;

		if (isset($this->functionCallOptions[$key]))
			$value = $this->functionCallOptions[$key];

		if (is_null($value))
			$value = $this->get($key);

		if (is_null($value) && isset(static::$defaults[$key]))
			$value = static::$defaults[$key];

		return $value;
	}
}